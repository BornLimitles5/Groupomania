{{> header}}

    <!-- sidebar starts -->
    <div class="sidebar">
        <div class="sidebarOption justify-content-center">
            <img src="/img/GroupBlkTrsp.png" class="w-50 text-center" alt="">
        </div>
        <a href="/"><div class="sidebarOption active">
            <span class="material-icons"> home </span>
            <h2>Home</h2>
        </div></a>

        <div class="sidebarOption">
            <span class="material-icons"> search </span>
            <h2>Explore</h2>
        </div>

        <div class="sidebarOption">
            <span class="material-icons"> notifications_none </span>
            <h2>Notifications</h2>
        </div>

        <div class="sidebarOption">
            <span class="material-icons"> mail_outline </span>
            <h2>Messages</h2>
        </div>

        <div class="sidebarOption">
            <span class="material-icons"> bookmark_border </span>
            <h2>Bookmarks</h2>
        </div>

        <div class="sidebarOption">
            <span class="material-icons"> list_alt </span>
            <h2>Lists</h2>
        </div>
           <a href="profile"><div class="sidebarOption">
        
            <span  class="material-icons"> perm_identity </span>
            <h2>Profile</h2>
        </div></a>

        <div class="sidebarOption">
            <span class="material-icons"> more_horiz </span>
            <h2>More</h2>
        </div>
        <button class="sidebar__tweet">Tweet</button>
    </div>
    <!-- sidebar ends -->

    <!-- feed starts -->
        <div class="feed">
        <div class="feed__header">
            <h2>Home</h2>
        </div>

        <!-- tweetbox starts -->
        {{#if user}}
        <div class="tweetBox">
            <form class="com" action="/auth/post?userId={{ user.idUser }}" method="POST" enctype="multipart/form-data">
            <div class="tweetbox__input">
                
                <div class="UserProfile">
                    <img class="rounded" src="/uploads/{{user.UserProfileImage}}" alt="Profile Image" class="profileImage" />
                </div>
                <label for="imageInput">
                <input type="file" id="imageInput" name="image" accept="image/*" onchange="previewImage(event)" style="display: none" />
                </label>
                <textarea class="textcom" id="myTextarea" name="messageText" placeholder="What's happening {{ user.UserName }}?" oninput="updateCharacterCount()" maxlength="280"></textarea>
            </div>
            <div class="d-flex under">
                <div class="imagePreview">
                <img id="preview" src=""/>
                </div>
                <div>
                <label for="imageInput">
                    <img class="material-icons addimg" src="/img/addimg.png" alt="">
                </div>
                </label>

                <div>
                <p id="charCount">280 caract√®res restants</p>
                </div>
                <button type="submit" class="tweetBox__tweetButton">Post !</button>
            </div>
            </form>
        </div>
        {{/if}}

    <!-- tweetbox ends -->


        <!-- post starts -->
        <div class="post">
            <div class="post__avatar">
            <img
                src="/uploads/{{ this.UserProfileImage }}" alt="{{ this.UserProfileImage }}"
            />
            </div>

            
            </div> 
        {{#each socketmessages}}
            <div class="post__body">
            <div class="post__header">
                <div class="post__headerText">
                <h3>
                    {{ this.UserName }}
                    <span class="post__headerSpecial"
                    ><span class="material-icons post__badge"> verified </span>@{{ this.UserName }}</span
                    >
                </h3>
                </div>
                <div class="post__headerDescription">
                <p>{{ this.SocketMessage }}</p>
                </div>
            </div>
            <div class="socketimg">
                <img
                src="/uploads/{{ this.MessageImage }}" alt="{{ this.MessageImage }}"
            />
            </div>
            <div class="post__footer">
                <span class="material-icons"> repeat </span>
                <span class="material-icons"> favorite_border </span>
                <span class="material-icons"> publish </span>
            </div>
            </div>
    {{/each}}
  </div>
            
        

        <!-- post ends -->

        </div>
    <!-- feed ends -->

    <!-- widgets starts -->
    

    <div class="widgets">
        <div class="widgets__input">
            <span class="material-icons widgets__searchIcon"> search </span>
            <input type="text" placeholder="Search Twitter" />
        </div>
        <div class="widgets__widgetContainer">
        <div class="text-center">
        {{#if user}} 
            <button class="btn btn-primary btn-block btn-default btn-rounded mb-4" data-toggle="modal" onclick="loadLogout()" data-target="#modalLogoutForm">Logout</button>
        {{else}}
            <button class="btn btn-primary btn-block btn-default btn-rounded mb-4" data-toggle="modal" onclick="loadRegister()" data-target="#modalRegisterForm">Register</button>
        </div>
        <div class="text-center">
            <button class="btn btn-primary btn-block btn-default btn-rounded mb-4" data-toggle="modal" onclick="loadLogin()" data-target="#modalSubscriptionForm">Login</button>
        </div>
        {{/if}}
    </div>
    </div>
    <!-- widgets ends -->

    <!-- Modal Register -->
    <form action="/auth/register" method="POST" >
        <div class="modal" id="modalRegisterForm" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" data-backdrop="static">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header text-center">
                <h4 class="modal-title w-100 font-weight-bold">Sign up</h4>
                <button type="button" class="close" onclick="loadHome()" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body mx-3">
                <div class="md-form mb-5">
                    <i class="fas fa-user prefix grey-text"></i>
                    <input type="text" name="name" required id="orangeForm-name" class="form-control validate">
                    <label id="name" data-error="wrong" data-success="right" for="orangeForm-name">Your name</label>
                </div>
                <div class="md-form mb-5">
                    <i class="fas fa-envelope prefix grey-text"></i>
                    <input type="email" name="email"  required id="orangeForm-email" class="form-control validate">
                    <label data-error="wrong" id="email" data-success="right" for="orangeForm-email">Your email</label>
                </div>
                <div class="md-form mb-4">
                    <i class="fas fa-lock prefix grey-text"></i>
                    <input type="password" id="orangeForm-pass" name="password" class="form-control validate">
                    <label data-error="wrong" data-success="right" id="password" required for="orangeForm-pass">Your password</label>
                </div>
                <div class="md-form mb-4">
                    <i class="fas fa-lock prefix grey-text"></i>
                    <input type="password" id="orangeForm-pass" name="passwordConfirm" class="form-control validate">
                    <label data-error="wrong" data-success="right" id="passwordConfirm" required for="orangeForm-pass">Confirm Your password</label>
                </div>
            </div>
            <div class="modal-footer d-flex justify-content-center">
                <button type="submit" class="btn btn-deep-orange">Sign up</button>
            </div>
        </div>
    </div>
    </div>
    </form>
    

    <!-- Modal Register ends -->
    <!--Modal Login-->
    <form action="/auth/login" method="post">
        <div class="modal" id="modalSubscriptionForm" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" data-backdrop="static">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
        <div class="modal-header text-center">
            <h4 class="modal-title w-100 font-weight-bold">Subscribe</h4>
                <button type="button" class="close" onclick="loadHome()" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
            </button>
        </div>
        <div class="modal-body mx-3">
            <div class="md-form mb-5">
            <i class="fas fa-user prefix grey-text"></i>
            <input type="email" id="form3" name="email"  class="form-control validate">
            <label data-error="wrong" data-success="right" for="form3" >Your Email</label>
        </div>

        <div class="md-form mb-4">
            <i class="fas fa-envelope prefix grey-text"></i>
            <input type="password" id="form2" name="password" class="form-control validate">
            <label data-error="wrong" data-success="right" for="form2">Your Password</label>
        </div>

        </div>
    <div class="modal-footer d-flex justify-content-center">
        <button type="submit" class="btn btn-indigo">Send <i class="fas fa-paper-plane-o ml-1"></i></button>
    </div>
    </div>
    </div>
        </div>
    </form>
    <!--Modal Login Ends-->
    
    <!--Modal Logout-->
    <form action="/auth/logout" method="post" >
        <div class="modal" id="modalLogoutForm" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" data-backdrop="static">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
        <div class="modal-header text-center">
            <h4 class="modal-title w-100 font-weight-bold">Logout</h4>
                <button type="button" class="close" onclick="loadHome()" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
            </button>
        </div>
        <div class="md-form mb-4">
            <h4>
                Log out of Groupomania?
                <br>
                You can always log back in at any time.
            </h4>
        </div>
        <div class="modal-footer d-flex justify-content-center">
        <button type="submit" class=" btn-block btn-primary">Logout <i class="fas fa-paper-plane-o ml-1"></i></button>
        <button  class="close btn-block btn-primary" onclick="loadHome()" data-dismiss="modal" >Close</button>
        </div>
        </div>
    </div>
    </div>
        </div>
    </form>
    <!--Modal Logout Ends-->
    {{!-- SnackBar --}}
        {{#if message}}
        <div id="snackbar">
            <h4 class="alert alert-danger mt-4">{{message}}</h4>
        </div>
        <script>
        showSnackbar("{{message}}");
        </script>
        {{/if}}

        {{#if messages}}
        <div class="container">
            <div id="snackbar">
                <h4 class="alert alert-success mt-4">{{messages}}</h4>
            </div>
        </div>
        <script>
        showSnackbar("{{messages}}");
        </script>
        {{/if}}

    {{!-- End of SnackBar --}}
    
     {{!-- Push State --}}
    <script>
    // DEFAULT CONTENT
    var DOMAIN_NAME = 'http://localhost:3000';

    function loadHome() {
        history.pushState({}, "", DOMAIN_NAME + "/");
    }
    
    function loadRegister() {
        history.pushState({}, "", DOMAIN_NAME + "/register");
    }

    function loadLogin() {
        history.pushState({}, "", DOMAIN_NAME + "/login");
    }

    function loadLogout() {
        history.pushState({}, "", DOMAIN_NAME + "/logout");
    }


    </script>
    {{!-- Compteur de Character --}}
    <script>
    function updateCharacterCount() {
        let textarea = document.getElementById('myTextarea');
        let imageInput = document.getElementById('imageInput');
        let charCount = document.getElementById('charCount');
        let submitButton = document.getElementsByClassName('tweetBox__tweetButton')[0];

        let remainingChars = 280 - textarea.value.length;
        charCount.textContent = remainingChars + ' caract√®res restants';

        if (textarea.value.trim() === '' && (!imageInput.files || imageInput.files.length === 0)) {
            submitButton.disabled = true;
            submitButton.style.backgroundColor = "gray";
        } else {
            submitButton.disabled = false;
            submitButton.style.backgroundColor = "#0069d9";
        }
    }

    // Add event listener to image input
    let imageInput = document.getElementById('imageInput');
    imageInput.addEventListener('change', updateCharacterCount);
    </script>

    {{!-- SnackBar --}}
    <script>
  function showSnackbar(message) {
    var snackbar = document.getElementById("snackbar");
    snackbar.innerText = message;
    snackbar.classList.add("show");
    setTimeout(function () {
      snackbar.classList.remove("show");
    }, 3000);
  }

  // Trigger the snackbar with the message from the controller
  var message = "{{message}}";
  var messages = "{{messages}}";

  if (message) {
    showSnackbar(message);
  }

  if (messages) {
    showSnackbar(messages);
  }
    </script>
    {{!-- Fonction d'envoie d'image du formulaire --}}
    <script>
  function previewImage(event) {
    var imageInput = event.target;
    var preview = document.getElementById("preview");

    var file = imageInput.files[0];
    var reader = new FileReader();

    reader.onload = function (e) {
      preview.src = e.target.result;
    };

    reader.readAsDataURL(file);
  }
    </script>
    {{!-- Socket.io --}}
    <script>
export default {
  data() {
    return {
      socketmessages: [], // Initialize the socketmessages data property
    };
  },
  mounted() {
    // Connect to the Socket.io server
    const socket = io();

    // Listen for new messages from the server
    socket.on('newMessage', (message) => {
      this.displayMessage(message);
    });

    // Fetch messages from the server
    fetch('/messages')
      .then((response) => response.json())
      .then((data) => {
        this.socketmessages = data.socketmessages;

        // Display the fetched messages
        this.socketmessages.forEach((message) => {
          this.displayMessage(message);
        });
      })
      .catch((error) => {
        console.error('Error fetching messages:', error);
      });
  },
  methods: {
    displayMessage(message) {
      // Display the message in your component's template
      console.log('New message:', message);
    },
  },
};
    </script>



{{> footer}}